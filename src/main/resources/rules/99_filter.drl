package rules;

import org.study.grabyou.service.Impl.DimensionService
import org.study.grabyou.service.Impl.BlackListService
import org.study.grabyou.config.RiskControllConfig
import org.study.grabyou.entity.Event
import org.study.grabyou.enums.EventType
import org.study.grabyou.enums.DimensionType
import org.study.grabyou.enums.TimeRange
import org.study.grabyou.utils.BlackRecordFactory
import org.apache.commons.lang.StringUtils

global DimensionService dimensionService
global BlackListService blackListService

rule "99_filter"
  salience 99
  lock-on-active true
  when
    event:Event()
  then
    // 频控
    for (DimensionType d : DimensionType.values()) {
      for (TimeRange t : TimeRange.values()) {
        int cnt = dimensionService.calculateNum(event, d, t);
//        System.out.println("cnt: " + cnt);
        switch (t) {
          case LAST_SECOND:
            if (cnt > RiskControllConfig.LOW_OPERATE_TIMES_BY_SECONDS && cnt <= RiskControllConfig.MID_OPERATE_TIMES_BY_SECONDS) {
              event.setDecisionType(RiskControllConfig.HUA_KUAI);
            } else if (cnt > RiskControllConfig.MID_OPERATE_TIMES_BY_SECONDS && cnt <= RiskControllConfig.HIGH_OPERATE_TIMES_BY_SECONDS) {
              event.setDecisionType(RiskControllConfig.WAIT_FOR);
            } else if (cnt > RiskControllConfig.HIGH_OPERATE_TIMES_BY_SECONDS) {
              System.out.println("超过秒级频控\n");
              event.setDecisionType(RiskControllConfig.REJECT);
              // 添加黑名单
              blackListService.addBlackRecord(BlackRecordFactory.build(event.getUserName(), d.getValue(), event.getEventType().getValue(), event.getOperateDeviceID(), "每秒频繁注册"));
            }
            break;
          case LAST_MINUTE:
            if (cnt > RiskControllConfig.LOW_OPERATE_TIMES_BY_MINUTE && cnt <= RiskControllConfig.MID_OPERATE_TIMES_BY_MINUTE) {
              event.setDecisionType(RiskControllConfig.HUA_KUAI);
            } else if (cnt > RiskControllConfig.MID_OPERATE_TIMES_BY_MINUTE && cnt <= RiskControllConfig.HIGH_OPERATE_TIMES_BY_MINUTE) {
              event.setDecisionType(RiskControllConfig.WAIT_FOR);
            } else if (cnt > RiskControllConfig.HIGH_OPERATE_TIMES_BY_MINUTE) {
              event.setDecisionType(RiskControllConfig.REJECT);
              // 加入黑名单
              blackListService.addBlackRecord(BlackRecordFactory.build(event.getUserName(), d.getValue(), event.getEventType().getValue(), event.getOperateDeviceID(), "每分频繁注册"));
            }
            break;
          case LAST_HOUR:
            if (cnt > RiskControllConfig.LOW_OPERATE_TIMES_BY_HOUR && cnt <= RiskControllConfig.MID_OPERATE_TIMES_BY_HOUR) {
              event.setDecisionType(RiskControllConfig.HUA_KUAI);
            } else if (cnt > RiskControllConfig.MID_OPERATE_TIMES_BY_HOUR && cnt <= RiskControllConfig.HIGH_OPERATE_TIMES_BY_HOUR) {
              event.setDecisionType(RiskControllConfig.WAIT_FOR);
            } else if (cnt > RiskControllConfig.HIGH_OPERATE_TIMES_BY_HOUR) {
              event.setDecisionType(RiskControllConfig.REJECT);
              // 加入黑名单
              blackListService.addBlackRecord(BlackRecordFactory.build(event.getUserName(), d.getValue(), event.getEventType().getValue(), event.getOperateDeviceID(), "每小时频繁注册"));
            }
        }
        if (event.getDecisionType() == RiskControllConfig.REJECT) break;
      }
      if (event.getDecisionType() == RiskControllConfig.REJECT) break;
    }

    int num = 0;
    // 账号绑定数量
    if (!StringUtils.isEmpty(event.getUserName())) {
      num = dimensionService.calculateBindNum(event.getUserName(), event.getOperateDeviceID());
    }
    if (!StringUtils.isEmpty(event.getTelephoneNumber())) {
      num = dimensionService.calculateBindNum(event.getTelephoneNumber(), event.getOperateDeviceID());
    }

    if (num > RiskControllConfig.HIGH_ACCOUNT_BIND_DEVICES) {
      event.setDecisionType(RiskControllConfig.REJECT);
      // 加入黑名单
      blackListService.addBlackRecord(BlackRecordFactory.build(event.getUserName(), !StringUtils.isEmpty(event.getUserName()) ? DimensionType.USERNAME.getValue() : DimensionType.TELEPHONE.getValue(), event.getEventType().getValue(), event.getOperateDeviceID(), "绑定设备数量超过阈值"));
    } else if (num > RiskControllConfig.MID_ACCOUNT_BIND_DEVICES) {
      event.setDecisionType(Math.max(event.getDecisionType(), RiskControllConfig.WAIT_FOR));
    } else if (num > RiskControllConfig.LOW_ACCOUNT_BIND_DEVICES) {
      event.setDecisionType(Math.max(event.getDecisionType(), RiskControllConfig.HUA_KUAI));
    }

//    delete(event);
//    System.out.println("hello 99_register!");
end
